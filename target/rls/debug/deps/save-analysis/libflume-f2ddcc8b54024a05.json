{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12","program":"C:\\Users\\DAVID\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","flume","--edition=2018","C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"async\"","--cfg","feature=\"futures-core\"","--cfg","feature=\"futures-sink\"","--cfg","feature=\"pin-project\"","-C","metadata=f2ddcc8b54024a05","-C","extra-filename=-f2ddcc8b54024a05","--out-dir","c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps","--extern","futures_core=c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps\\libfutures_core-087913808c6bab5e.rmeta","--extern","futures_sink=c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps\\libfutures_sink-42effa7ce425dff3.rmeta","--extern","pin_project=c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps\\libpin_project-a26f3adf24e03f4a.rmeta","--extern","spin1=c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps\\libspin-69dc52715652488f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\DAVID\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\DAVID\\Documents\\GitHub\\rust-example\\target\\rls\\debug\\deps\\libflume-f2ddcc8b54024a05.rmeta"},"prelude":{"crate_id":{"name":"flume","disambiguator":[14790550982143121136,0]},"crate_root":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src","external_crates":[{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","num":14,"id":{"name":"futures_core","disambiguator":[1925450448152840744,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","num":15,"id":{"name":"futures_sink","disambiguator":[1159555140867771621,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","num":16,"id":{"name":"pin_project","disambiguator":[16754185560209340038,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","num":17,"id":{"name":"pin_project_internal","disambiguator":[13626605895778721237,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":18,"id":{"name":"spin","disambiguator":[5819547402894610468,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":19,"id":{"name":"lock_api","disambiguator":[11225503526341225861,0]}},{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","num":20,"id":{"name":"scopeguard","disambiguator":[609407471197110695,0]}}],"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":0,"byte_end":34323,"line_start":1,"line_end":1019,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":0,"byte_end":34323,"line_start":1,"line_end":1019,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":195},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":609},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":629},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":653},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":691},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":707},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":344},{"krate":0,"index":350},{"krate":0,"index":363},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":388},{"krate":0,"index":393},{"krate":0,"index":399},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":498},{"krate":0,"index":503},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":516},{"krate":0,"index":723},{"krate":0,"index":728},{"krate":0,"index":521},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":537},{"krate":0,"index":539}],"decl_id":null,"docs":" # Flume","sig":null,"attributes":[{"value":"/ # Flume","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":0,"byte_end":11,"line_start":1,"line_end":1,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":12,"byte_end":15,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A blazingly fast multi-producer, multi-consumer channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":16,"byte_end":76,"line_start":3,"line_end":3,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":77,"byte_end":80,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ *\"Do not communicate by sharing memory; instead, share memory by communicating.\"*","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":81,"byte_end":166,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":167,"byte_end":170,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Why Flume?","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":171,"byte_end":188,"line_start":7,"line_end":7,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":189,"byte_end":192,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ - **Featureful**: Unbounded, bounded and rendezvous queues","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":193,"byte_end":255,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ - **Fast**: Always faster than `std::sync::mpsc` and sometimes `crossbeam-channel`","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":256,"byte_end":342,"line_start":10,"line_end":10,"column_start":1,"column_end":87}},{"value":"/ - **Safe**: No `unsafe` code anywhere in the codebase!","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":343,"byte_end":401,"line_start":11,"line_end":11,"column_start":1,"column_end":59}},{"value":"/ - **Flexible**: `Sender` and `Receiver` both implement `Send + Sync + Clone`","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":402,"byte_end":482,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ - **Familiar**: Drop-in replacement for `std::sync::mpsc`","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":483,"byte_end":544,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/ - **Capable**: Additional features like MPMC support and send timeouts/deadlines","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":545,"byte_end":629,"line_start":14,"line_end":14,"column_start":1,"column_end":85}},{"value":"/ - **Simple**: Few dependencies, minimal codebase, fast to compile","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":630,"byte_end":699,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ - **Asynchronous**: `async` support, including mix 'n match with sync code","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":700,"byte_end":778,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ - **Ergonomic**: Powerful `select`-like interface","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":779,"byte_end":832,"line_start":17,"line_end":17,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":833,"byte_end":836,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":837,"byte_end":851,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":852,"byte_end":855,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":856,"byte_end":863,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::unbounded();","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":864,"byte_end":902,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":903,"byte_end":906,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ tx.send(42).unwrap();","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":907,"byte_end":932,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(rx.recv().unwrap(), 42);","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":933,"byte_end":972,"line_start":25,"line_end":25,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":973,"byte_end":980,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":982,"byte_end":1004,"line_start":28,"line_end":28,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"r#async","qualname":"::r#async","value":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":541},{"krate":0,"index":550},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":73},{"krate":0,"index":596},{"krate":0,"index":554},{"krate":0,"index":81},{"krate":0,"index":601},{"krate":0,"index":91},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":109},{"krate":0,"index":117},{"krate":0,"index":125},{"krate":0,"index":129},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":156},{"krate":0,"index":160},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":174},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":191}],"decl_id":null,"docs":" Futures and other types that allow asynchronous interaction with channels.\n","sig":null,"attributes":[{"value":"cfg(feature = \"async\")","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1049,"byte_end":1074,"line_start":32,"line_end":32,"column_start":1,"column_end":26}},{"value":"/ Futures and other types that allow asynchronous interaction with channels.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":34325,"byte_end":34403,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36430,"byte_end":36440,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"send_async","qualname":"<Sender<T>>::send_async","value":"pub fn send_async(&Self, T) -> SendFut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously send a value into the channel, returning an error if all receivers have been\n dropped. If the channel is bounded and is full, the returned future will yield to the async\n runtime.","sig":null,"attributes":[{"value":"/ Asynchronously send a value into the channel, returning an error if all receivers have been","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36031,"byte_end":36126,"line_start":74,"line_end":74,"column_start":5,"column_end":100}},{"value":"/ dropped. If the channel is bounded and is full, the returned future will yield to the async","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36131,"byte_end":36226,"line_start":75,"line_end":75,"column_start":5,"column_end":100}},{"value":"/ runtime.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36231,"byte_end":36243,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36248,"byte_end":36251,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, the returned future will not yield to the async runtime if the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36256,"byte_end":36353,"line_start":78,"line_end":78,"column_start":5,"column_end":102}},{"value":"/ channel is unbounded. This may change in later versions.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36358,"byte_end":36418,"line_start":79,"line_end":79,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37049,"byte_end":37064,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"into_send_async","qualname":"<Sender<T>>::into_send_async","value":"pub fn into_send_async(Self, T) -> SendFut","parent":null,"children":[],"decl_id":null,"docs":" Convert this sender into a future that asynchronously sends a single message into the channel,\n returning an error if all receivers have been dropped. If the channel is bounded and is full,\n this future will yield to the async runtime.","sig":null,"attributes":[{"value":"/ Convert this sender into a future that asynchronously sends a single message into the channel,","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36609,"byte_end":36707,"line_start":87,"line_end":87,"column_start":5,"column_end":103}},{"value":"/ returning an error if all receivers have been dropped. If the channel is bounded and is full,","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36712,"byte_end":36809,"line_start":88,"line_end":88,"column_start":5,"column_end":102}},{"value":"/ this future will yield to the async runtime.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36814,"byte_end":36862,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36867,"byte_end":36870,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, the returned future will not yield to the async runtime if the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36875,"byte_end":36972,"line_start":91,"line_end":91,"column_start":5,"column_end":102}},{"value":"/ channel is unbounded. This may change in later versions.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36977,"byte_end":37037,"line_start":92,"line_end":92,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37609,"byte_end":37613,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"sink","qualname":"<Sender<T>>::sink","value":"pub fn sink(&Self) -> SendSink<, T>","parent":null,"children":[],"decl_id":null,"docs":" Create an asynchronous sink that uses this sender to asynchronously send messages into the\n channel. The sender will continue to be usable after the sink has been dropped.","sig":null,"attributes":[{"value":"/ Create an asynchronous sink that uses this sender to asynchronously send messages into the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37242,"byte_end":37336,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ channel. The sender will continue to be usable after the sink has been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37341,"byte_end":37424,"line_start":101,"line_end":101,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37429,"byte_end":37432,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, the returned sink will not yield to the async runtime if the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37437,"byte_end":37532,"line_start":103,"line_end":103,"column_start":5,"column_end":100}},{"value":"/ channel is unbounded. This may change in later versions.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37537,"byte_end":37597,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38041,"byte_end":38050,"line_start":116,"line_end":116,"column_start":12,"column_end":21},"name":"into_sink","qualname":"<Sender<T>>::into_sink","value":"pub fn into_sink(Self) -> SendSink","parent":null,"children":[],"decl_id":null,"docs":" Convert this sender into a sink that allows asynchronously sending messages into the channel.","sig":null,"attributes":[{"value":"/ Convert this sender into a sink that allows asynchronously sending messages into the channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37759,"byte_end":37856,"line_start":112,"line_end":112,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37861,"byte_end":37864,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ In the current implementation, the returned sink will not yield to the async runtime if the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37869,"byte_end":37964,"line_start":114,"line_end":114,"column_start":5,"column_end":100}},{"value":"/ channel is unbounded. This may change in later versions.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":37969,"byte_end":38029,"line_start":115,"line_end":115,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38534,"byte_end":38541,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"SendFut","qualname":"::r#async::SendFut","value":"SendFut {  }","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"decl_id":null,"docs":" A future that sends a value into a channel.","sig":null,"attributes":[{"value":"must_use =\n\"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38414,"byte_end":38495,"line_start":132,"line_end":132,"column_start":1,"column_end":82}},{"value":"pin(__private(PinnedDrop))","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38496,"byte_end":38522,"line_start":133,"line_end":133,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38534,"byte_end":38541,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"__SendFut","qualname":"::r#async::_::__SendFut","value":"__SendFut {  }","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38496,"byte_end":38522,"line_start":133,"line_end":133,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39272,"byte_end":39287,"line_start":154,"line_end":154,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<SendFut>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_disconnected`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_disconnected`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39224,"byte_end":39260,"line_start":153,"line_end":153,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39395,"byte_end":39403,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SendFut>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_empty`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_empty`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39354,"byte_end":39383,"line_start":158,"line_end":158,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39503,"byte_end":39510,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SendFut>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_full`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_full`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39463,"byte_end":39491,"line_start":163,"line_end":163,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39605,"byte_end":39608,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"len","qualname":"<SendFut>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::len`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::len`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39569,"byte_end":39593,"line_start":168,"line_end":168,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39705,"byte_end":39713,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SendFut>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::capacity`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::capacity`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39664,"byte_end":39693,"line_start":173,"line_end":173,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42348,"byte_end":42356,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"SendSink","qualname":"::r#async::SendSink","value":"","parent":null,"children":[],"decl_id":null,"docs":" A sink that allows sending values into a channel.","sig":null,"attributes":[{"value":"/ A sink that allows sending values into a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42213,"byte_end":42266,"line_start":248,"line_end":248,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42267,"byte_end":42270,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ Can be created via [`Sender::sink`] or [`Sender::into_sink`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42271,"byte_end":42336,"line_start":250,"line_end":250,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42464,"byte_end":42479,"line_start":255,"line_end":255,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<SendSink>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_disconnected`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_disconnected`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42416,"byte_end":42452,"line_start":254,"line_end":254,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42582,"byte_end":42590,"line_start":260,"line_end":260,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SendSink>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_empty`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_empty`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42541,"byte_end":42570,"line_start":259,"line_end":259,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42685,"byte_end":42692,"line_start":265,"line_end":265,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SendSink>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::is_full`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::is_full`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42645,"byte_end":42673,"line_start":264,"line_end":264,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42782,"byte_end":42785,"line_start":270,"line_end":270,"column_start":12,"column_end":15},"name":"len","qualname":"<SendSink>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::len`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::len`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42746,"byte_end":42770,"line_start":269,"line_end":269,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42877,"byte_end":42885,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SendSink>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" See [`Sender::capacity`].\n","sig":null,"attributes":[{"value":"/ See [`Sender::capacity`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42836,"byte_end":42865,"line_start":274,"line_end":274,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44138,"byte_end":44148,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"recv_async","qualname":"<Receiver<T>>::recv_async","value":"pub fn recv_async(&Self) -> RecvFut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously receive a value from the channel, returning an error if all senders have been\n dropped. If the channel is empty, the returned future will yield to the async runtime.\n","sig":null,"attributes":[{"value":"/ Asynchronously receive a value from the channel, returning an error if all senders have been","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":43935,"byte_end":44031,"line_start":313,"line_end":313,"column_start":5,"column_end":101}},{"value":"/ dropped. If the channel is empty, the returned future will yield to the async runtime.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44036,"byte_end":44126,"line_start":314,"line_end":314,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44485,"byte_end":44500,"line_start":322,"line_end":322,"column_start":12,"column_end":27},"name":"into_recv_async","qualname":"<Receiver<T>>::into_recv_async","value":"pub fn into_recv_async(Self) -> RecvFut","parent":null,"children":[],"decl_id":null,"docs":" Convert this receiver into a future that asynchronously receives a single message from the\n channel, returning an error if all senders have been dropped. If the channel is empty, this\n future will yield to the async runtime.\n","sig":null,"attributes":[{"value":"/ Convert this receiver into a future that asynchronously receives a single message from the","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44231,"byte_end":44325,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ channel, returning an error if all senders have been dropped. If the channel is empty, this","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44330,"byte_end":44425,"line_start":320,"line_end":320,"column_start":5,"column_end":100}},{"value":"/ future will yield to the async runtime.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44430,"byte_end":44473,"line_start":321,"line_end":321,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44794,"byte_end":44800,"line_start":328,"line_end":328,"column_start":12,"column_end":18},"name":"stream","qualname":"<Receiver<T>>::stream","value":"pub fn stream(&Self) -> RecvStream<, T>","parent":null,"children":[],"decl_id":null,"docs":" Create an asynchronous stream that uses this receiver to asynchronously receive messages\n from the channel. The receiver will continue to be usable after the stream has been dropped.\n","sig":null,"attributes":[{"value":"/ Create an asynchronous stream that uses this receiver to asynchronously receive messages","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44589,"byte_end":44681,"line_start":326,"line_end":326,"column_start":5,"column_end":97}},{"value":"/ from the channel. The receiver will continue to be usable after the stream has been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44686,"byte_end":44782,"line_start":327,"line_end":327,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45013,"byte_end":45024,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Receiver<T>>::into_stream","value":"pub fn into_stream(Self) -> RecvStream","parent":null,"children":[],"decl_id":null,"docs":" Convert this receiver into a stream that allows asynchronously receiving messages from the channel.\n","sig":null,"attributes":[{"value":"/ Convert this receiver into a stream that allows asynchronously receiving messages from the channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":44898,"byte_end":45001,"line_start":332,"line_end":332,"column_start":5,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45367,"byte_end":45374,"line_start":342,"line_end":342,"column_start":12,"column_end":19},"name":"RecvFut","qualname":"::r#async::RecvFut","value":"RecvFut {  }","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"decl_id":null,"docs":" A future which allows asynchronously receiving a message.","sig":null,"attributes":[{"value":"/ A future which allows asynchronously receiving a message.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45126,"byte_end":45187,"line_start":338,"line_end":338,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45188,"byte_end":45191,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Can be created via [`Receiver::recv_async`] or [`Receiver::into_recv_async`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45192,"byte_end":45273,"line_start":340,"line_end":340,"column_start":1,"column_end":82}},{"value":"must_use =\n\"futures/streams/sinks do nothing unless you `.await` or poll them\"","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45274,"byte_end":45355,"line_start":341,"line_end":341,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":48777,"byte_end":48792,"line_start":422,"line_end":422,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<RecvFut>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_disconnected`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_disconnected`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":48727,"byte_end":48765,"line_start":421,"line_end":421,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":48904,"byte_end":48912,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RecvFut>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_empty`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_empty`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":48861,"byte_end":48892,"line_start":426,"line_end":426,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49016,"byte_end":49023,"line_start":432,"line_end":432,"column_start":12,"column_end":19},"name":"is_full","qualname":"<RecvFut>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_full`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_full`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":48974,"byte_end":49004,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49122,"byte_end":49125,"line_start":437,"line_end":437,"column_start":12,"column_end":15},"name":"len","qualname":"<RecvFut>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::len`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::len`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49084,"byte_end":49110,"line_start":436,"line_end":436,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49226,"byte_end":49234,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RecvFut>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::capacity`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::capacity`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49183,"byte_end":49214,"line_start":441,"line_end":441,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49949,"byte_end":49959,"line_start":470,"line_end":470,"column_start":12,"column_end":22},"name":"RecvStream","qualname":"::r#async::RecvStream","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream which allows asynchronously receiving messages.","sig":null,"attributes":[{"value":"/ A stream which allows asynchronously receiving messages.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49799,"byte_end":49859,"line_start":467,"line_end":467,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49860,"byte_end":49863,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ Can be created via [`Receiver::stream`] or [`Receiver::into_stream`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49864,"byte_end":49937,"line_start":469,"line_end":469,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50071,"byte_end":50086,"line_start":474,"line_end":474,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<RecvStream>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_disconnected`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_disconnected`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50021,"byte_end":50059,"line_start":473,"line_end":473,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50191,"byte_end":50199,"line_start":479,"line_end":479,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RecvStream>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_empty`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_empty`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50148,"byte_end":50179,"line_start":478,"line_end":478,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50296,"byte_end":50303,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"is_full","qualname":"<RecvStream>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::is_full`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::is_full`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50254,"byte_end":50284,"line_start":483,"line_end":483,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50395,"byte_end":50398,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"len","qualname":"<RecvStream>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::len`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::len`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50357,"byte_end":50383,"line_start":488,"line_end":488,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50492,"byte_end":50500,"line_start":494,"line_end":494,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RecvStream>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" See [`Receiver::capacity`].\n","sig":null,"attributes":[{"value":"/ See [`Receiver::capacity`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50449,"byte_end":50480,"line_start":493,"line_end":493,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1634,"byte_end":1643,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"SendError","qualname":"::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that may be emitted when attempting to send a value into a channel on a sender when\n all receivers are dropped.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to send a value into a channel on a sender when","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1457,"byte_end":1553,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/ all receivers are dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1554,"byte_end":1584,"line_start":54,"line_end":54,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1647,"byte_end":1652,"line_start":56,"line_end":56,"column_start":25,"column_end":30},"name":"0","qualname":"::SendError::0","value":"T","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1759,"byte_end":1769,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SendError<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume the error, yielding the message that failed to send.\n","sig":null,"attributes":[{"value":"/ Consume the error, yielding the message that failed to send.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1683,"byte_end":1747,"line_start":59,"line_end":59,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2467,"byte_end":2471,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Full","qualname":"::TrySendError::Full","value":"TrySendError::Full(T)","parent":{"krate":0,"index":629},"children":[],"decl_id":null,"docs":" The channel the message is sent on has a finite capacity and was full when the send was attempted.\n","sig":null,"attributes":[{"value":"/ The channel the message is sent on has a finite capacity and was full when the send was attempted.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2360,"byte_end":2462,"line_start":81,"line_end":81,"column_start":5,"column_end":107}}]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2568,"byte_end":2580,"line_start":84,"line_end":84,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::TrySendError::Disconnected","value":"TrySendError::Disconnected(T)","parent":{"krate":0,"index":629},"children":[],"decl_id":null,"docs":" All channel receivers were dropped and so the message has nobody to receive it.\n","sig":null,"attributes":[{"value":"/ All channel receivers were dropped and so the message has nobody to receive it.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2480,"byte_end":2563,"line_start":83,"line_end":83,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2338,"byte_end":2350,"line_start":80,"line_end":80,"column_start":10,"column_end":22},"name":"TrySendError","qualname":"::TrySendError","value":"pub enum TrySendError<T> { Full(T), Disconnected(T), }","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":634}],"decl_id":null,"docs":" An error that may be emitted when attempting to send a value into a channel on a sender when\n the channel is full or all receivers are dropped.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to send a value into a channel on a sender when","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2140,"byte_end":2236,"line_start":77,"line_end":77,"column_start":1,"column_end":97}},{"value":"/ the channel is full or all receivers are dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2237,"byte_end":2290,"line_start":78,"line_end":78,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2694,"byte_end":2704,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume the error, yielding the message that failed to send.\n","sig":null,"attributes":[{"value":"/ Consume the error, yielding the message that failed to send.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2618,"byte_end":2682,"line_start":88,"line_end":88,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3936,"byte_end":3943,"line_start":129,"line_end":129,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SendTimeoutError::Timeout","value":"SendTimeoutError::Timeout(T)","parent":{"krate":0,"index":653},"children":[],"decl_id":null,"docs":" A timeout occurred when attempting to send the message.\n","sig":null,"attributes":[{"value":"/ A timeout occurred when attempting to send the message.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3872,"byte_end":3931,"line_start":128,"line_end":128,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4040,"byte_end":4052,"line_start":131,"line_end":131,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::SendTimeoutError::Disconnected","value":"SendTimeoutError::Disconnected(T)","parent":{"krate":0,"index":653},"children":[],"decl_id":null,"docs":" All channel receivers were dropped and so the message has nobody to receive it.\n","sig":null,"attributes":[{"value":"/ All channel receivers were dropped and so the message has nobody to receive it.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3952,"byte_end":4035,"line_start":130,"line_end":130,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3846,"byte_end":3862,"line_start":127,"line_end":127,"column_start":10,"column_end":26},"name":"SendTimeoutError","qualname":"::SendTimeoutError","value":"pub enum SendTimeoutError<T> { Timeout(T), Disconnected(T), }","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":658}],"decl_id":null,"docs":" An error that may be emitted when sending a value into a channel on a sender with a timeout when\n the send operation times out or all receivers are dropped.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when sending a value into a channel on a sender with a timeout when","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3635,"byte_end":3735,"line_start":124,"line_end":124,"column_start":1,"column_end":101}},{"value":"/ the send operation times out or all receivers are dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3736,"byte_end":3798,"line_start":125,"line_end":125,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4170,"byte_end":4180,"line_start":136,"line_end":136,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SendTimeoutError<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume the error, yielding the message that failed to send.\n","sig":null,"attributes":[{"value":"/ Consume the error, yielding the message that failed to send.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4094,"byte_end":4158,"line_start":135,"line_end":135,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5460,"byte_end":5472,"line_start":179,"line_end":179,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::RecvError::Disconnected","value":"RecvError::Disconnected","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" All senders were dropped and no messages are waiting in the channel, so no further messages can be received.\n","sig":null,"attributes":[{"value":"/ All senders were dropped and no messages are waiting in the channel, so no further messages can be received.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5343,"byte_end":5455,"line_start":178,"line_end":178,"column_start":5,"column_end":117}}]},{"kind":"Enum","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5327,"byte_end":5336,"line_start":177,"line_end":177,"column_start":10,"column_end":19},"name":"RecvError","qualname":"::RecvError","value":"pub enum RecvError { Disconnected, }","parent":null,"children":[{"krate":0,"index":678}],"decl_id":null,"docs":" An error that may be emitted when attempting to wait for a value on a receiver when all senders\n are dropped and there are no more messages in the channel.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to wait for a value on a receiver when all senders","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5110,"byte_end":5209,"line_start":174,"line_end":174,"column_start":1,"column_end":100}},{"value":"/ are dropped and there are no more messages in the channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5210,"byte_end":5272,"line_start":175,"line_end":175,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6121,"byte_end":6126,"line_start":198,"line_end":198,"column_start":5,"column_end":10},"name":"Empty","qualname":"::TryRecvError::Empty","value":"TryRecvError::Empty","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" The channel was empty when the receive was attempted.\n","sig":null,"attributes":[{"value":"/ The channel was empty when the receive was attempted.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6059,"byte_end":6116,"line_start":197,"line_end":197,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6249,"byte_end":6261,"line_start":200,"line_end":200,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::TryRecvError::Disconnected","value":"TryRecvError::Disconnected","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":" All senders were dropped and no messages are waiting in the channel, so no further messages can be received.\n","sig":null,"attributes":[{"value":"/ All senders were dropped and no messages are waiting in the channel, so no further messages can be received.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6132,"byte_end":6244,"line_start":199,"line_end":199,"column_start":5,"column_end":117}}]},{"kind":"Enum","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6040,"byte_end":6052,"line_start":196,"line_end":196,"column_start":10,"column_end":22},"name":"TryRecvError","qualname":"::TryRecvError","value":"pub enum TryRecvError { Empty, Disconnected, }","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":694}],"decl_id":null,"docs":" An error that may be emitted when attempting to fetch a value on a receiver when there are no\n messages in the channel. If there are no messages in the channel and all senders are dropped,\n then `TryRecvError::Disconnected` will be returned.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to fetch a value on a receiver when there are no","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5734,"byte_end":5831,"line_start":192,"line_end":192,"column_start":1,"column_end":98}},{"value":"/ messages in the channel. If there are no messages in the channel and all senders are dropped,","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5832,"byte_end":5929,"line_start":193,"line_end":193,"column_start":1,"column_end":98}},{"value":"/ then `TryRecvError::Disconnected` will be returned.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5930,"byte_end":5985,"line_start":194,"line_end":194,"column_start":1,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7138,"byte_end":7145,"line_start":228,"line_end":228,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::RecvTimeoutError::Timeout","value":"RecvTimeoutError::Timeout","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" A timeout occurred when attempting to receive a message.\n","sig":null,"attributes":[{"value":"/ A timeout occurred when attempting to receive a message.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7073,"byte_end":7133,"line_start":227,"line_end":227,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7268,"byte_end":7280,"line_start":230,"line_end":230,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::RecvTimeoutError::Disconnected","value":"RecvTimeoutError::Disconnected","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" All senders were dropped and no messages are waiting in the channel, so no further messages can be received.\n","sig":null,"attributes":[{"value":"/ All senders were dropped and no messages are waiting in the channel, so no further messages can be received.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7151,"byte_end":7263,"line_start":229,"line_end":229,"column_start":5,"column_end":117}}]},{"kind":"Enum","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7050,"byte_end":7066,"line_start":226,"line_end":226,"column_start":10,"column_end":26},"name":"RecvTimeoutError","qualname":"::RecvTimeoutError","value":"pub enum RecvTimeoutError { Timeout, Disconnected, }","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":710}],"decl_id":null,"docs":" An error that may be emitted when attempting to wait for a value on a receiver with a timeout\n when the receive operation times out or all senders are dropped and there are no values left\n in the channel.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to wait for a value on a receiver with a timeout","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6781,"byte_end":6878,"line_start":222,"line_end":222,"column_start":1,"column_end":98}},{"value":"/ when the receive operation times out or all senders are dropped and there are no values left","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6879,"byte_end":6975,"line_start":223,"line_end":223,"column_start":1,"column_end":97}},{"value":"/ in the channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6976,"byte_end":6995,"line_start":224,"line_end":224,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21147,"byte_end":21153,"line_start":654,"line_end":654,"column_start":12,"column_end":18},"name":"Sender","qualname":"::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":439}],"decl_id":null,"docs":" A transmitting end of a channel.\n","sig":null,"attributes":[{"value":"/ A transmitting end of a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21099,"byte_end":21135,"line_start":653,"line_end":653,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21494,"byte_end":21502,"line_start":662,"line_end":662,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"pub fn try_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to send a value into the channel. If the channel is bounded and full, or all\n receivers have been dropped, an error is returned. If the channel associated with this\n sender is unbounded, this method has the same behaviour as [`Sender::send`].\n","sig":null,"attributes":[{"value":"/ Attempt to send a value into the channel. If the channel is bounded and full, or all","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21214,"byte_end":21302,"line_start":659,"line_end":659,"column_start":5,"column_end":93}},{"value":"/ receivers have been dropped, an error is returned. If the channel associated with this","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21307,"byte_end":21397,"line_start":660,"line_end":660,"column_start":5,"column_end":95}},{"value":"/ sender is unbounded, this method has the same behaviour as [`Sender::send`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21402,"byte_end":21482,"line_start":661,"line_end":661,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22136,"byte_end":22140,"line_start":674,"line_end":674,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(&Self, T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if all receivers have been dropped.\n If the channel is bounded and is full, this method will block until space is available\n or all receivers have been dropped. If the channel is unbounded, this method will not\n block.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if all receivers have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21831,"byte_end":21920,"line_start":670,"line_end":670,"column_start":5,"column_end":94}},{"value":"/ If the channel is bounded and is full, this method will block until space is available","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21925,"byte_end":22015,"line_start":671,"line_end":671,"column_start":5,"column_end":95}},{"value":"/ or all receivers have been dropped. If the channel is unbounded, this method will not","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22020,"byte_end":22109,"line_start":672,"line_end":672,"column_start":5,"column_end":94}},{"value":"/ block.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22114,"byte_end":22124,"line_start":673,"line_end":673,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22685,"byte_end":22698,"line_start":685,"line_end":685,"column_start":12,"column_end":25},"name":"send_deadline","qualname":"<Sender<T>>::send_deadline","value":"pub fn send_deadline(&Self, T, Instant) -> Result<(), SendTimeoutError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if all receivers have been dropped\n or the deadline has passed. If the channel is bounded and is full, this method will\n block until space is available, the deadline is reached, or all receivers have been\n dropped.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if all receivers have been dropped","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22384,"byte_end":22472,"line_start":681,"line_end":681,"column_start":5,"column_end":93}},{"value":"/ or the deadline has passed. If the channel is bounded and is full, this method will","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22477,"byte_end":22564,"line_start":682,"line_end":682,"column_start":5,"column_end":92}},{"value":"/ block until space is available, the deadline is reached, or all receivers have been","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22569,"byte_end":22656,"line_start":683,"line_end":683,"column_start":5,"column_end":92}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":22661,"byte_end":22673,"line_start":684,"line_end":684,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23381,"byte_end":23393,"line_start":697,"line_end":697,"column_start":12,"column_end":24},"name":"send_timeout","qualname":"<Sender<T>>::send_timeout","value":"pub fn send_timeout(&Self, T, Duration) -> Result<(), SendTimeoutError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if all receivers have been dropped\n or the timeout has expired. If the channel is bounded and is full, this method will\n block until space is available, the timeout has expired, or all receivers have been\n dropped.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if all receivers have been dropped","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23080,"byte_end":23168,"line_start":693,"line_end":693,"column_start":5,"column_end":93}},{"value":"/ or the timeout has expired. If the channel is bounded and is full, this method will","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23173,"byte_end":23260,"line_start":694,"line_end":694,"column_start":5,"column_end":92}},{"value":"/ block until space is available, the timeout has expired, or all receivers have been","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23265,"byte_end":23352,"line_start":695,"line_end":695,"column_start":5,"column_end":92}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23357,"byte_end":23369,"line_start":696,"line_end":696,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23627,"byte_end":23642,"line_start":702,"line_end":702,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<Sender<T>>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all receivers for this channel have been dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if all receivers for this channel have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23546,"byte_end":23615,"line_start":701,"line_end":701,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23817,"byte_end":23825,"line_start":708,"line_end":708,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Sender<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is empty.\n Note: Zero-capacity channels are always empty.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is empty.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23709,"byte_end":23750,"line_start":706,"line_end":706,"column_start":5,"column_end":46}},{"value":"/ Note: Zero-capacity channels are always empty.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23755,"byte_end":23805,"line_start":707,"line_end":707,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23991,"byte_end":23998,"line_start":714,"line_end":714,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Sender<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is full.\n Note: Zero-capacity channels are always full.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is full.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23885,"byte_end":23925,"line_start":712,"line_end":712,"column_start":5,"column_end":45}},{"value":"/ Note: Zero-capacity channels are always full.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":23930,"byte_end":23979,"line_start":713,"line_end":713,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24118,"byte_end":24121,"line_start":719,"line_end":719,"column_start":12,"column_end":15},"name":"len","qualname":"<Sender<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of messages in the channel\n","sig":null,"attributes":[{"value":"/ Returns the number of messages in the channel","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24057,"byte_end":24106,"line_start":718,"line_end":718,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24241,"byte_end":24249,"line_start":724,"line_end":724,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Sender<T>>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If the channel is bounded, returns its capacity.\n","sig":null,"attributes":[{"value":"/ If the channel is bounded, returns its capacity.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24177,"byte_end":24229,"line_start":723,"line_end":723,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25396,"byte_end":25404,"line_start":758,"line_end":758,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":465}],"decl_id":null,"docs":" The receiving end of a channel.","sig":null,"attributes":[{"value":"/ The receiving end of a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25123,"byte_end":25158,"line_start":753,"line_end":753,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25159,"byte_end":25162,"line_start":754,"line_end":754,"column_start":1,"column_end":4}},{"value":"/ Note: Cloning the receiver *does not* turn this channel into a broadcast channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25163,"byte_end":25248,"line_start":755,"line_end":755,"column_start":1,"column_end":86}},{"value":"/ Each message will only be received by a single receiver. This is useful for","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25249,"byte_end":25328,"line_start":756,"line_end":756,"column_start":1,"column_end":80}},{"value":"/ implementing work stealing for concurrent programs.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25329,"byte_end":25384,"line_start":757,"line_end":757,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25653,"byte_end":25661,"line_start":765,"line_end":765,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"pub fn try_recv(&Self) -> Result<T, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to fetch an incoming value from the channel associated with this receiver,\n returning an error if the channel is empty or if all senders have been dropped.\n","sig":null,"attributes":[{"value":"/ Attempt to fetch an incoming value from the channel associated with this receiver,","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25467,"byte_end":25553,"line_start":763,"line_end":763,"column_start":5,"column_end":91}},{"value":"/ returning an error if the channel is empty or if all senders have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25558,"byte_end":25641,"line_start":764,"line_end":764,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26106,"byte_end":26110,"line_start":775,"line_end":775,"column_start":12,"column_end":16},"name":"recv","qualname":"<Receiver<T>>::recv","value":"pub fn recv(&Self) -> Result<T, RecvError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all senders have been dropped.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25955,"byte_end":26046,"line_start":773,"line_end":773,"column_start":5,"column_end":96}},{"value":"/ error if all senders have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26051,"byte_end":26094,"line_start":774,"line_end":774,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26519,"byte_end":26532,"line_start":784,"line_end":784,"column_start":12,"column_end":25},"name":"recv_deadline","qualname":"<Receiver<T>>::recv_deadline","value":"pub fn recv_deadline(&Self, Instant) -> Result<T, RecvTimeoutError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all senders have been dropped or the deadline has passed.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26341,"byte_end":26432,"line_start":782,"line_end":782,"column_start":5,"column_end":96}},{"value":"/ error if all senders have been dropped or the deadline has passed.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26437,"byte_end":26507,"line_start":783,"line_end":783,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27055,"byte_end":27067,"line_start":794,"line_end":794,"column_start":12,"column_end":24},"name":"recv_timeout","qualname":"<Receiver<T>>::recv_timeout","value":"pub fn recv_timeout(&Self, Duration) -> Result<T, RecvTimeoutError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all senders have been dropped or the timeout has expired.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26877,"byte_end":26968,"line_start":792,"line_end":792,"column_start":5,"column_end":96}},{"value":"/ error if all senders have been dropped or the timeout has expired.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":26973,"byte_end":27043,"line_start":793,"line_end":793,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27441,"byte_end":27445,"line_start":802,"line_end":802,"column_start":12,"column_end":16},"name":"iter","qualname":"<Receiver<T>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Create a blocking iterator over the values received on the channel that finishes iteration\n when all senders have been dropped.","sig":null,"attributes":[{"value":"/ Create a blocking iterator over the values received on the channel that finishes iteration","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27203,"byte_end":27297,"line_start":798,"line_end":798,"column_start":5,"column_end":99}},{"value":"/ when all senders have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27302,"byte_end":27341,"line_start":799,"line_end":799,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27346,"byte_end":27349,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ You can also create a self-owned iterator with [`Receiver::into_iter`].","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27354,"byte_end":27429,"line_start":801,"line_end":801,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27681,"byte_end":27689,"line_start":808,"line_end":808,"column_start":12,"column_end":20},"name":"try_iter","qualname":"<Receiver<T>>::try_iter","value":"pub fn try_iter(&Self) -> TryIter<, T>","parent":null,"children":[],"decl_id":null,"docs":" A non-blocking iterator over the values received on the channel that finishes iteration\n when all senders have been dropped or the channel is empty.\n","sig":null,"attributes":[{"value":"/ A non-blocking iterator over the values received on the channel that finishes iteration","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27510,"byte_end":27601,"line_start":806,"line_end":806,"column_start":5,"column_end":96}},{"value":"/ when all senders have been dropped or the channel is empty.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27606,"byte_end":27669,"line_start":807,"line_end":807,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27999,"byte_end":28004,"line_start":815,"line_end":815,"column_start":12,"column_end":17},"name":"drain","qualname":"<Receiver<T>>::drain","value":"pub fn drain(&Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Take all msgs currently sitting in the channel and produce an iterator over them. Unlike\n `try_iter`, the iterator will not attempt to fetch any more values from the channel once\n the function has been called.\n","sig":null,"attributes":[{"value":"/ Take all msgs currently sitting in the channel and produce an iterator over them. Unlike","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27760,"byte_end":27852,"line_start":812,"line_end":812,"column_start":5,"column_end":97}},{"value":"/ `try_iter`, the iterator will not attempt to fetch any more values from the channel once","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27857,"byte_end":27949,"line_start":813,"line_end":813,"column_start":5,"column_end":97}},{"value":"/ the function has been called.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":27954,"byte_end":27987,"line_start":814,"line_end":814,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28304,"byte_end":28319,"line_start":824,"line_end":824,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<Receiver<T>>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all senders for this channel have been dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if all senders for this channel have been dropped.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28225,"byte_end":28292,"line_start":823,"line_end":823,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28494,"byte_end":28502,"line_start":830,"line_end":830,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Receiver<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is empty.\n Note: Zero-capacity channels are always empty.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is empty.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28386,"byte_end":28427,"line_start":828,"line_end":828,"column_start":5,"column_end":46}},{"value":"/ Note: Zero-capacity channels are always empty.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28432,"byte_end":28482,"line_start":829,"line_end":829,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28668,"byte_end":28675,"line_start":836,"line_end":836,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Receiver<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is full.\n Note: Zero-capacity channels are always full.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is full.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28562,"byte_end":28602,"line_start":834,"line_end":834,"column_start":5,"column_end":45}},{"value":"/ Note: Zero-capacity channels are always full.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28607,"byte_end":28656,"line_start":835,"line_end":835,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28796,"byte_end":28799,"line_start":841,"line_end":841,"column_start":12,"column_end":15},"name":"len","qualname":"<Receiver<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of messages in the channel.\n","sig":null,"attributes":[{"value":"/ Returns the number of messages in the channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28734,"byte_end":28784,"line_start":840,"line_end":840,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28919,"byte_end":28927,"line_start":846,"line_end":846,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Receiver<T>>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If the channel is bounded, returns its capacity.\n","sig":null,"attributes":[{"value":"/ If the channel is bounded, returns its capacity.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":28855,"byte_end":28907,"line_start":845,"line_end":845,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30657,"byte_end":30661,"line_start":902,"line_end":902,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":506}],"decl_id":null,"docs":" An iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An iterator over the msgs received from a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30591,"byte_end":30645,"line_start":901,"line_end":901,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30933,"byte_end":30940,"line_start":915,"line_end":915,"column_start":12,"column_end":19},"name":"TryIter","qualname":"::TryIter","value":"TryIter {  }","parent":null,"children":[{"krate":0,"index":515}],"decl_id":null,"docs":" An non-blocking iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An non-blocking iterator over the msgs received from a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30854,"byte_end":30921,"line_start":914,"line_end":914,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31234,"byte_end":31239,"line_start":929,"line_end":929,"column_start":12,"column_end":17},"name":"Drain","qualname":"::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"decl_id":null,"docs":" An fixed-sized iterator over the msgs drained from a channel.\n","sig":null,"attributes":[{"value":"/ An fixed-sized iterator over the msgs drained from a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31140,"byte_end":31205,"line_start":927,"line_end":927,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31878,"byte_end":31886,"line_start":952,"line_end":952,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":532}],"decl_id":null,"docs":" An owned iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the msgs received from a channel.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31806,"byte_end":31866,"line_start":951,"line_end":951,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32638,"byte_end":32647,"line_start":978,"line_end":978,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::unbounded","value":"pub fn unbounded<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a channel with no maximum capacity.","sig":null,"attributes":[{"value":"/ Create a channel with no maximum capacity.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32067,"byte_end":32113,"line_start":964,"line_end":964,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32114,"byte_end":32117,"line_start":965,"line_end":965,"column_start":1,"column_end":4}},{"value":"/ Create an unbounded channel with a [`Sender`] and [`Receiver`] connected to each end respectively. Values sent in","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32118,"byte_end":32235,"line_start":966,"line_end":966,"column_start":1,"column_end":118}},{"value":"/ one end of the channel will be received on the other end. The channel is thread-safe, and both [`Sender`] and","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32236,"byte_end":32349,"line_start":967,"line_end":967,"column_start":1,"column_end":114}},{"value":"/ [`Receiver`] may be sent to or shared between threads as necessary. In addition, both [`Sender`] and [`Receiver`]","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32350,"byte_end":32467,"line_start":968,"line_end":968,"column_start":1,"column_end":118}},{"value":"/ may be cloned.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32468,"byte_end":32486,"line_start":969,"line_end":969,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32487,"byte_end":32490,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32491,"byte_end":32505,"line_start":971,"line_end":971,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32506,"byte_end":32513,"line_start":972,"line_end":972,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::unbounded();","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32514,"byte_end":32552,"line_start":973,"line_end":973,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32553,"byte_end":32556,"line_start":974,"line_end":974,"column_start":1,"column_end":4}},{"value":"/ tx.send(42).unwrap();","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32557,"byte_end":32582,"line_start":975,"line_end":975,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(rx.recv().unwrap(), 42);","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32583,"byte_end":32622,"line_start":976,"line_end":976,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32623,"byte_end":32630,"line_start":977,"line_end":977,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34134,"byte_end":34141,"line_start":1013,"line_end":1013,"column_start":8,"column_end":15},"name":"bounded","qualname":"::bounded","value":"pub fn bounded<T>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a channel with a maximum capacity.","sig":null,"attributes":[{"value":"/ Create a channel with a maximum capacity.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32816,"byte_end":32861,"line_start":986,"line_end":986,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32862,"byte_end":32865,"line_start":987,"line_end":987,"column_start":1,"column_end":4}},{"value":"/ Create a bounded channel with a [`Sender`] and [`Receiver`] connected to each end respectively. Values sent in one","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32866,"byte_end":32984,"line_start":988,"line_end":988,"column_start":1,"column_end":119}},{"value":"/ end of the channel will be received on the other end. The channel is thread-safe, and both [`Sender`] and","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":32985,"byte_end":33094,"line_start":989,"line_end":989,"column_start":1,"column_end":110}},{"value":"/ [`Receiver`] may be sent to or shared between threads as necessary. In addition, both [`Sender`] and [`Receiver`]","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33095,"byte_end":33212,"line_start":990,"line_end":990,"column_start":1,"column_end":118}},{"value":"/ may be cloned.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33213,"byte_end":33231,"line_start":991,"line_end":991,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33232,"byte_end":33235,"line_start":992,"line_end":992,"column_start":1,"column_end":4}},{"value":"/ Unlike an [`unbounded`] channel, if there is no space left for new messages, calls to","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33236,"byte_end":33325,"line_start":993,"line_end":993,"column_start":1,"column_end":90}},{"value":"/ [`Sender::send`] will block (unblocking once a receiver has made space). If blocking behaviour","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33326,"byte_end":33424,"line_start":994,"line_end":994,"column_start":1,"column_end":99}},{"value":"/ is not desired, [`Sender::try_send`] may be used.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33425,"byte_end":33478,"line_start":995,"line_end":995,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33479,"byte_end":33482,"line_start":996,"line_end":996,"column_start":1,"column_end":4}},{"value":"/ Like `std::sync::mpsc`, `flume` supports 'rendezvous' channels. A bounded queue with a maximum capacity of zero","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33483,"byte_end":33598,"line_start":997,"line_end":997,"column_start":1,"column_end":116}},{"value":"/ will block senders until a receiver is available to take the value. You can imagine a rendezvous channel as a","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33599,"byte_end":33712,"line_start":998,"line_end":998,"column_start":1,"column_end":114}},{"value":"/ ['Glienicke Bridge'](https://en.wikipedia.org/wiki/Glienicke_Bridge)-style location at which senders and receivers","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33713,"byte_end":33831,"line_start":999,"line_end":999,"column_start":1,"column_end":119}},{"value":"/ perform a handshake and transfer ownership of a value.","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33832,"byte_end":33890,"line_start":1000,"line_end":1000,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33891,"byte_end":33894,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33895,"byte_end":33909,"line_start":1002,"line_end":1002,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33910,"byte_end":33917,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::bounded(32);","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33918,"byte_end":33956,"line_start":1004,"line_end":1004,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33957,"byte_end":33960,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ for i in 1..33 {","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33961,"byte_end":33981,"line_start":1006,"line_end":1006,"column_start":1,"column_end":21}},{"value":"/     tx.send(i).unwrap();","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":33982,"byte_end":34010,"line_start":1007,"line_end":1007,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34011,"byte_end":34016,"line_start":1008,"line_end":1008,"column_start":1,"column_end":6}},{"value":"/ assert!(tx.try_send(33).is_err());","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34017,"byte_end":34055,"line_start":1009,"line_end":1009,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34056,"byte_end":34059,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rx.try_iter().sum::<u32>(), (1..33).sum());","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34060,"byte_end":34118,"line_start":1011,"line_end":1011,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":34119,"byte_end":34126,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":34771,"byte_end":34782,"line_start":21,"line_end":21,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35008,"byte_end":35019,"line_start":31,"line_end":31,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35302,"byte_end":35306,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35816,"byte_end":35826,"line_start":62,"line_end":62,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36015,"byte_end":36021,"line_start":73,"line_end":73,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38534,"byte_end":38541,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38669,"byte_end":38676,"line_start":140,"line_end":140,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39935,"byte_end":39942,"line_start":181,"line_end":181,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":40163,"byte_end":40170,"line_start":193,"line_end":193,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42104,"byte_end":42111,"line_start":242,"line_end":242,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42394,"byte_end":42402,"line_start":253,"line_end":253,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42971,"byte_end":42979,"line_start":280,"line_end":280,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":43737,"byte_end":43745,"line_start":303,"line_end":303,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":43917,"byte_end":43925,"line_start":312,"line_end":312,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45487,"byte_end":45494,"line_start":347,"line_end":347,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49324,"byte_end":49331,"line_start":447,"line_end":447,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49425,"byte_end":49432,"line_start":453,"line_end":453,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49653,"byte_end":49660,"line_start":461,"line_end":461,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49997,"byte_end":50007,"line_start":472,"line_end":472,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50584,"byte_end":50594,"line_start":499,"line_end":499,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50737,"byte_end":50747,"line_start":505,"line_end":505,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":51165,"byte_end":51175,"line_start":519,"line_end":519,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51858,"byte_end":51868,"line_start":15,"line_end":15,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51955,"byte_end":51965,"line_start":21,"line_end":21,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":52172,"byte_end":52182,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1664,"byte_end":1673,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1818,"byte_end":1827,"line_start":63,"line_end":63,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1961,"byte_end":1970,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2123,"byte_end":2132,"line_start":75,"line_end":75,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2596,"byte_end":2608,"line_start":87,"line_end":87,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2843,"byte_end":2855,"line_start":96,"line_end":96,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3120,"byte_end":3132,"line_start":105,"line_end":105,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3429,"byte_end":3441,"line_start":114,"line_end":114,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3480,"byte_end":3492,"line_start":116,"line_end":116,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4068,"byte_end":4084,"line_start":134,"line_end":134,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4322,"byte_end":4338,"line_start":143,"line_end":143,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4479,"byte_end":4495,"line_start":149,"line_end":149,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4813,"byte_end":4829,"line_start":158,"line_end":158,"column_start":31,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4868,"byte_end":4884,"line_start":160,"line_end":160,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5499,"byte_end":5508,"line_start":182,"line_end":182,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5720,"byte_end":5729,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6288,"byte_end":6300,"line_start":203,"line_end":203,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6588,"byte_end":6600,"line_start":212,"line_end":212,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6630,"byte_end":6642,"line_start":214,"line_end":214,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7307,"byte_end":7323,"line_start":233,"line_end":233,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7622,"byte_end":7638,"line_start":242,"line_end":242,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7668,"byte_end":7684,"line_start":244,"line_end":244,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":8048,"byte_end":8052,"line_start":261,"line_end":261,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":9079,"byte_end":9083,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":12068,"byte_end":12072,"line_start":402,"line_end":402,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":12938,"byte_end":12944,"line_start":433,"line_end":433,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":421},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21198,"byte_end":21204,"line_start":658,"line_end":658,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24334,"byte_end":24340,"line_start":729,"line_end":729,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24711,"byte_end":24717,"line_start":738,"line_end":738,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24850,"byte_end":24856,"line_start":744,"line_end":744,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25449,"byte_end":25457,"line_start":762,"line_end":762,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29012,"byte_end":29020,"line_start":851,"line_end":851,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29647,"byte_end":29655,"line_start":865,"line_end":865,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29790,"byte_end":29798,"line_start":871,"line_end":871,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30344,"byte_end":30352,"line_start":891,"line_end":891,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30730,"byte_end":30734,"line_start":906,"line_end":906,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31009,"byte_end":31016,"line_start":919,"line_end":919,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31572,"byte_end":31577,"line_start":937,"line_end":937,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31728,"byte_end":31733,"line_start":945,"line_end":945,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31943,"byte_end":31951,"line_start":956,"line_end":956,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1083,"byte_end":1090,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":34771,"byte_end":34782,"line_start":21,"line_end":21,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35008,"byte_end":35019,"line_start":31,"line_end":31,"column_start":17,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":49},"to":{"krate":0,"index":210}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35302,"byte_end":35306,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":35816,"byte_end":35826,"line_start":62,"line_end":62,"column_start":23,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":541},"to":{"krate":2,"index":3242}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":36015,"byte_end":36021,"line_start":73,"line_end":73,"column_start":9,"column_end":15},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38534,"byte_end":38541,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":596},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":38669,"byte_end":38676,"line_start":140,"line_end":140,"column_start":13,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":39935,"byte_end":39942,"line_start":181,"line_end":181,"column_start":28,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":596},"to":{"krate":16,"index":41}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":40163,"byte_end":40170,"line_start":193,"line_end":193,"column_start":24,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":596},"to":{"krate":2,"index":12967}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42104,"byte_end":42111,"line_start":242,"line_end":242,"column_start":29,"column_end":36},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":596},"to":{"krate":14,"index":27}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42394,"byte_end":42402,"line_start":253,"line_end":253,"column_start":13,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":42971,"byte_end":42979,"line_start":280,"line_end":280,"column_start":25,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":104},"to":{"krate":15,"index":17}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":43737,"byte_end":43745,"line_start":303,"line_end":303,"column_start":23,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":104},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":43917,"byte_end":43925,"line_start":312,"line_end":312,"column_start":9,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":45487,"byte_end":45494,"line_start":347,"line_end":347,"column_start":13,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49324,"byte_end":49331,"line_start":447,"line_end":447,"column_start":22,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49425,"byte_end":49432,"line_start":453,"line_end":453,"column_start":24,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":12967}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49653,"byte_end":49660,"line_start":461,"line_end":461,"column_start":29,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":135},"to":{"krate":14,"index":27}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":49997,"byte_end":50007,"line_start":472,"line_end":472,"column_start":13,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50584,"byte_end":50594,"line_start":499,"line_end":499,"column_start":23,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":169},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":50737,"byte_end":50747,"line_start":505,"line_end":505,"column_start":24,"column_end":34},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":169},"to":{"krate":14,"index":96}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\async.rs","byte_start":51165,"byte_end":51175,"line_start":519,"line_end":519,"column_start":29,"column_end":39},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":169},"to":{"krate":14,"index":110}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51343,"byte_end":51347,"line_start":3,"line_end":3,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":210}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51350,"byte_end":51354,"line_start":3,"line_end":3,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3036},"to":{"krate":0,"index":210}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51858,"byte_end":51868,"line_start":15,"line_end":15,"column_start":18,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":51955,"byte_end":51965,"line_start":21,"line_end":21,"column_start":17,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":214},"to":{"krate":0,"index":210}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\signal.rs","byte_start":52172,"byte_end":52182,"line_start":30,"line_end":30,"column_start":6,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1664,"byte_end":1673,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1818,"byte_end":1827,"line_start":63,"line_end":63,"column_start":24,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":1961,"byte_end":1970,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2123,"byte_end":2132,"line_start":75,"line_end":75,"column_start":31,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":609},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2596,"byte_end":2608,"line_start":87,"line_end":87,"column_start":9,"column_end":21},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":2843,"byte_end":2855,"line_start":96,"line_end":96,"column_start":24,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3120,"byte_end":3132,"line_start":105,"line_end":105,"column_start":26,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3429,"byte_end":3441,"line_start":114,"line_end":114,"column_start":31,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":629},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":3480,"byte_end":3492,"line_start":116,"line_end":116,"column_start":32,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4068,"byte_end":4084,"line_start":134,"line_end":134,"column_start":9,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4322,"byte_end":4338,"line_start":143,"line_end":143,"column_start":24,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":653},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4479,"byte_end":4495,"line_start":149,"line_end":149,"column_start":26,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":653},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4813,"byte_end":4829,"line_start":158,"line_end":158,"column_start":31,"column_end":47},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":653},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":4868,"byte_end":4884,"line_start":160,"line_end":160,"column_start":32,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":653},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5499,"byte_end":5508,"line_start":182,"line_end":182,"column_start":23,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":677},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":5720,"byte_end":5729,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":677},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6288,"byte_end":6300,"line_start":203,"line_end":203,"column_start":23,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":691},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6588,"byte_end":6600,"line_start":212,"line_end":212,"column_start":28,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":691},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":6630,"byte_end":6642,"line_start":214,"line_end":214,"column_start":26,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":691},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7307,"byte_end":7323,"line_start":233,"line_end":233,"column_start":23,"column_end":39},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7622,"byte_end":7638,"line_start":242,"line_end":242,"column_start":28,"column_end":44},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":7668,"byte_end":7684,"line_start":244,"line_end":244,"column_start":26,"column_end":42},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":8048,"byte_end":8052,"line_start":261,"line_end":261,"column_start":29,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":9079,"byte_end":9083,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":12068,"byte_end":12072,"line_start":402,"line_end":402,"column_start":9,"column_end":13},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":12938,"byte_end":12944,"line_start":433,"line_end":433,"column_start":9,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":21198,"byte_end":21204,"line_start":658,"line_end":658,"column_start":9,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24334,"byte_end":24340,"line_start":729,"line_end":729,"column_start":19,"column_end":25},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24711,"byte_end":24717,"line_start":738,"line_end":738,"column_start":24,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":24850,"byte_end":24856,"line_start":744,"line_end":744,"column_start":18,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":25449,"byte_end":25457,"line_start":762,"line_end":762,"column_start":9,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29012,"byte_end":29020,"line_start":851,"line_end":851,"column_start":19,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":463},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29647,"byte_end":29655,"line_start":865,"line_end":865,"column_start":24,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":463},"to":{"krate":2,"index":9602}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":29790,"byte_end":29798,"line_start":871,"line_end":871,"column_start":18,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":463},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30344,"byte_end":30352,"line_start":891,"line_end":891,"column_start":26,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":463},"to":{"krate":2,"index":7722}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":30730,"byte_end":30734,"line_start":906,"line_end":906,"column_start":26,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":503},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31009,"byte_end":31016,"line_start":919,"line_end":919,"column_start":26,"column_end":33},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31572,"byte_end":31577,"line_start":937,"line_end":937,"column_start":26,"column_end":31},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":723},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31728,"byte_end":31733,"line_start":945,"line_end":945,"column_start":35,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":723},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\DAVID\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flume-0.10.12\\src\\lib.rs","byte_start":31943,"byte_end":31951,"line_start":956,"line_end":956,"column_start":22,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":7914}}]}